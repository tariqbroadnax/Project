package Editor.comp;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;

import Movement.Movement;

public class MovementForm extends Form
	implements ValueListener, ActionListener
{
	private Movement movement;
		
	private JCheckBox enabledBox;
	
	private ForceForm form;
	
	private JButton addBtn, removeBtn;
	
	public MovementForm()
	{
		this(new Movement());
	}
	
	public MovementForm(Movement movement)
	{
		JLabel enabledLbl = new JLabel("Enabled");

		enabledBox = new JCheckBox();

		form = new ForceForm();
		
		addBtn = new JButton("Add");
		removeBtn = new JButton("Remove");
	
		JPanel nwPnl = new JPanel(),
			   wPnl = new JPanel();
		
		nwPnl.add(enabledBox);
		nwPnl.add(addBtn); 
		nwPnl.add(removeBtn);
		
		eastPnl.setLayout(new BorderLayout());
		eastPnl.add(comp, constraints);
		
		addComponent(enabledLbl, 0, 0, 1);
		addField(enabledBox, 1, 0, 1);
		addComponent(dirLbl, 0, 1, 1);
		addField(dirFld, 1, 1, 1);
		addComponent(enabledLbl, 0, 2, 1);
		addComponent(enabledBox, 1, 2, 1);	
		
		speedFld.addValueListener(this);
		dirFld.addValueListener(this);
		enabledBox.addActionListener(this);
		
		setMovement(movement);
	}
	
	public void setMovement(Movement movement)
	{
		this.movement = movement;
	
		updateFields();
	}
	
	public void updateFields()
	{
		double speed = movement.getSpeed(),
			   dir = movement.getDirection();
			
		boolean enabled = movement.isEnabled();
		
		speedFld.setValue(speed);
		dirFld.setValue(dir);
		enabledBox.setSelected(enabled);
	}
	
	private void updateAndNotify()
	{
		updateValues();
		notifyListeners();
	}
	
	private void updateValues()
	{
		double speed = speedFld.getValue(),
			   dir = dirFld.getValue();
		
		boolean enabled = enabledBox.isSelected();
		
		movement.setSpeed(speed);
		movement.setDirection(dir);
		movement.setEnabled(enabled);
	}
	
	@Override
	public void valueChanged() {
		updateAndNotify();
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		updateAndNotify();
	}
}

package Graphic;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;

public class ImagePool 
{
	public static final ImagePool instance = new ImagePool();
	
	private Map<File, Node> map;
	
	private ImagePool()
	{
		map = new HashMap<File, Node>();
	}
	
	public synchronized void request(File file)
	{
		if(file == null)
			return;
		
		if(!map.containsKey(file))
		{
			Node node = new Node();
			
			try {
				node.img = ImageIO.read(file);
			} catch(IOException e) {}
			
			map.put(file, node);
		}
		
		Node node = map.get(file);
		
		if(node == null)
			System.out.println(file.getName() + " " + map.containsKey(file));
		
		node.requests++;
		
		System.out.println(file.getName() + " " + node.requests);
		
		if(node.requests > 15)
		{
			new Exception().printStackTrace();
			System.exit(1);
		}
	}
	
	public synchronized void release(File file)
	{
		if(file == null || !map.containsKey(file))
			return;
	
		Node node = map.get(file);
		
		node.requests--;
	

		if(node.requests == 0)
		{
			new Exception().printStackTrace();
			map.remove(file);
			System.exit(1);
		}
	}
	
	public BufferedImage getImage(File file) 
	{
		try {
		if(file != null && map.containsKey(file))
			return map.get(file).img;
		} catch(NullPointerException e) {
			System.out.println(map);
		}
		return null;
	}
	
	private class Node
	{
		BufferedImage img;
		int requests = 0;
	}
}

package EntityComponent;

import static Utilities.ShapeUtilities.collides;
import static Utilities.ShapeUtilities.moveShape;

import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RectangularShape;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import Graphic.Vector2D;
import Maths.Circle2D;
import Utilities.Pack;

public class RigidBody implements Cloneable, Serializable
{	
	private List<Limb> limbs;
	
	public RigidBody()
	{
		limbs = new ArrayList<Limb>();
	}
	
	public RigidBody(RigidBody body)
	{
		limbs = new ArrayList<Limb>();
		
		for(Limb limb : body.limbs)
		{
			limb = (Limb) limb.clone();
			 
			limbs.add(limb);
		}
	}
	
	public void updateLimbs(Point2D.Double pt)
	{
		for(Limb limb : limbs)
		{
			Vector2D.Double offset = limb.getOffset();
			
			RectangularShape shape = limb.getShape();
			
			double width = shape.getWidth(),
				   height = shape.getHeight();
			
			shape.setFrame(pt.x - width/2 + offset.x,
						   pt.y - height/2 + offset.y,
						   width, height);
		}
	}
	
	public void addLimb(Limb limb) {
		limbs.add(limb);
	}
	
	public void removeLimb(Limb limb) {
		limbs.remove(limb);
	}

	public Point2D.Double center()
	{
		double xs = 0, ys = 0;
		
		int size = 0;
		
		for(RectangularShape comp : comps)
		{
			xs += comp.getCenterX();
			ys += comp.getCenterY();
			size++;
		}
		
		return new Point2D.Double(xs / size, ys / size);
	}
	
	// returns first collision found 
	public Pack<RectangularShape, RectangularShape> 
			collidesWith(RigidBody rigidBody)
	{
		for(RectangularShape myComp : comps)
		{
			for(RectangularShape otherComp : rigidBody.getComponents())
				if(collides(myComp, otherComp))
					return new Pack<RectangularShape, RectangularShape>(
									myComp, otherComp);	
		}
		
		return null;
	}
	
	public Pack<RectangularShape, RectangularShape> 
		collidesWith(Circle2D.Double circ)
	{
		for(RectangularShape myComp : comps)
		{
			if(myComp instanceof Circle2D.Double) {
				//System.out.println(collides(myComp, circ) + " " + circ + " " + myComp);
			}
			
			if(collides(myComp, circ))
			{
				return new Pack<RectangularShape, RectangularShape>(
									myComp, circ);	
			}
		}
		
		return null;
	}
	
	public Rectangle2D.Double union()
	{
		if(comps.size() == 0)
			return null;
		
		double minX = Double.POSITIVE_INFINITY,
			   minY = minX,
			   maxX = Double.NEGATIVE_INFINITY,
			   maxY = maxX;
		
		for(RectangularShape comp : comps)
		{
			double minX2 = comp.getMinX(),
				   minY2 = comp.getMinY(),
				   maxX2 = comp.getMaxX(),
				   maxY2 = comp.getMaxY();
			
			minX = minX < minX2 ? minX : minX2;
			minY = minY < minY2 ? minY : minY2;
			maxX = maxX > maxX2 ? maxX : maxX2;
			maxY = maxY > maxY2 ? maxY : maxY2;
		}
		
		return new Rectangle2D.Double(minX, minY, maxX - minX, maxY - minY);
	}
	
	public Collection<RectangularShape> getComponents()
	{
		return comps;
	}
	
	public Object clone()
	{
		return new RigidBody(this);
	}
	
	public String toString()
	{
		String str = super.toString();
		
		for(RectangularShape comp : comps)
			str += "\n" + comp.toString();
		
		return str;
	}
}

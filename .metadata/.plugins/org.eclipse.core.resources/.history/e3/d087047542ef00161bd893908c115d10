package Graphic;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.RenderingHints;
import java.awt.Window;
import java.awt.image.BufferStrategy;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import GUI.CanvasPanel;
import GUI.GPanel;

public class Painter
{
	private List<Paintable> paintables;
			
	private Map<Object, Object> hints;
	
	private Camera camera;
	
	private Window window;
	
	private GPanel panel;
	
	public Painter(Window window, Camera camera)
	{
		this.window = window;
		this.camera = camera;
				
		hints = new HashMap<Object, Object>();
		
		hints.put(RenderingHints.KEY_ANTIALIASING,
				  RenderingHints.VALUE_ANTIALIAS_ON);
		
		hints.put(RenderingHints.KEY_RENDERING,
				  RenderingHints.VALUE_RENDER_QUALITY);
		
		paintables = new ArrayList<Paintable>();
	}
	
	public Painter(GPanel panel, Camera camera)
	{
		this.panel = panel;
		this.camera = camera;
				
		paintables = new ArrayList<Paintable>();
	}
	
	public void paint()
	{
		BufferStrategy strategy;
		Dimension size;
		
		if(window == null)
		{
			strategy = canvas.getBufferStrategy();
			size = canvas.getSize();
		}
		else
		{
			strategy = window.getBufferStrategy();
			size = window.getSize();
		}
								
		if(strategy == null || size.width == 0 || size.height == 0) return;
		
		do {
			
			do {
				Graphics g = strategy.getDrawGraphics();				
				
				g.clearRect(0, 0, size.width, size.height);

				camera.setScreenDimension(size.width, size.height);
				
				GraphicsContext gc = new GraphicsContext(g, camera);

				gc.g2d.setRenderingHints(hints);
				
				for(Paintable p : paintables)
					p.paint(gc);	

// comment this out if no comps are added
// else the default comp will hide background
				try {
					if(window != null)
						EventQueue.invokeAndWait(() -> window.paintComponents(g));
					else
						EventQueue.invokeAndWait(() -> canvas.paintComponents(g));
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				//window.paintComponents(g);	

				g.dispose();
				gc.g2d.dispose();
				
			} while(strategy.contentsRestored());
						
			strategy.show();
			
		} while(strategy.contentsLost());
	}
	
	public void addPaintable(Paintable p) {
		paintables.add(p);
	}
	
	public void removePaintable(Paintable p) {
		paintables.remove(p);
	}
	
	public void swapPaintable(Paintable p, Paintable p2)
	{
		int index = paintables.indexOf(p);
		
		paintables.set(index, p2);
	}
	
	public void clear() {
		paintables.clear();
	}
	
	public void setToCanvas(CanvasPanel canvas) {
		this.canvas = canvas;
		window = null;
	}
	
	public void setToWindow(Window window) {
		this.window = window;
		canvas = null;
	}
}

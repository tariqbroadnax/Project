package Game;

import java.awt.Color;
import java.awt.Rectangle;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.Serializable;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import Entity.Entity;
import EntityComponent.BodyType;
import EntityComponent.EntityComponent;
import EntityComponent.GraphicsComponent;
import EntityComponent.RigidBodyComponent;
import EntityManager.CollisionManager;
import Graphic.Camera;
import Graphic.Graphic;
import Graphic.GraphicsContext;
import Graphic.Paintable;
import Maths.Dimension2D;
import Tileset.TileMap;

public class Scene implements Updatable, Paintable, 
							  Serializable, Cloneable
{	
	private Map<Class<? extends EntityComponent>, List<Entity>> compMap;
	
	private Set<Entity> addQ, removeQ;
	private Set<Entity> entities;

	private CollisionManager collManager;
		
	private ScenePainter painter;	
	
	private TileMap tileMap;

	private List<Graphic> graphics;

	private boolean gridVisible;

	private Game game;
	
	private Rectangle2D.Double bound;
	
	// private LightMap lightMap;
	// private TerrainMap terrMap;
	// private GClock clock;	
	// private RainManager rain;
	// private LayeredGraphic background;

	public Scene(Scene scene)
	{
		this();

		for(Entity ent : scene.getEntities())
		{
			ent = (Entity) ent.clone();
			
			addEntityNow(ent);
		}
	}
	
	public Scene()
	{			
		compMap = new HashMap<Class<? extends EntityComponent>,
					          List<Entity>>();
		
		addQ = new HashSet<Entity>();
		removeQ = new HashSet<Entity>();
		entities = new HashSet<Entity>();
		
		// lightMap = new LightMap();
	
		// clock = new GClock();
		
		// background = new LayeredGraphic();
		
		tileMap = new TileMap();
		// terrMap = new TerrainMap(this);
		
		gridVisible = true;
	
		// rain = new RainManager();
		
		collManager = new CollisionManager(this);
		
		painter = new ScenePainter(this);
		
		graphics = new ArrayList<Graphic>();
		
		bound = new Rectangle2D.Double(-100, -100, 200, 200);
		
		//background.add(tileMap);
		// background.add(new TileMap());
		
		addManagers();
		
	}
	
	public void start()
	{
		createBoundWalls();
		
		for(Entity e : entities)
			e.start();	
	}
	
	private void createBoundWalls()
	{
		Entity walls = new Entity();
		
		RigidBodyComponent comp = new RigidBodyComponent();
		
		Rectangle2D.Double left = new Rectangle2D.Double(
				bound.x - 50, bound.y,
				50, bound.height),
						  right = new Rectangle2D.Double(
				bound.x + bound.width, bound.y,
				50, bound.height),
						  up = new Rectangle2D.Double(
				bound.x, bound.y - 50, bound.width, 50),
						  down = new Rectangle2D.Double(
				bound.x, bound.y + bound.height, bound.width, 50);
		
		comp.getRigidBody()
			.addLimbs(left, right, up, down);
		
		comp.setBodyType(BodyType.STATIC);
		
		walls.add(comp);
		
		addEntity(walls);
	}

	@Override
	public void update(Duration delta)
	{
		//addAndRemoveEntitiesFromQueue();
		
		//updateTileMap();
		
		clearAddQueue();
		clearRemoveQueue();
		// clock.update(delta);
		//rain.update(delta);
		updateEntities(delta);	
		
		collManager.update(delta);
	}
	
	@Override
	public void paint(GraphicsContext gc)
	{		
		// System.out.println("painting");

		//lightMap.paint(gc);
		
		tileMap.paint(gc);
//		drawGrid(gc);
		painter.paint(gc);
		
		RoomFilter filter = new RoomFilter(this);
		
		filter.addRoom(new Rectangle2D.Double(-60, -60, 120, 120));
		filter.addRoom(new Rectangle2D.Double(60, -60, 120, 120));
		
		filter.paint(gc);
		
		//rain.paint(gc);
	}
	
	private void drawGrid(GraphicsContext gc)
	{	
		Dimension2D.Double dim = 
				gc.camera.sizeOnScreen2D(20, 20);
		
		Rectangle scrBound = 
				gc.camera.screenBound();
		
		double zoom = gc.camera.getZoom();
		
		scrBound.x /= zoom; scrBound.y /= zoom;
		scrBound.width /= zoom; scrBound.height /= zoom;
		
		int minX = (int)(scrBound.x / dim.width) - 1,
			minY = (int)(scrBound.y / dim.height) - 1,
			maxX = (int)((scrBound.x + scrBound.width) / dim.width),
			maxY = (int)((scrBound.y + scrBound.height) / dim.height);
		
		Rectangle2D.Double rect = 
				new Rectangle2D.Double(
						0, 0, dim.width, dim.height);
		
		gc.g2d.setColor(Color.black);
		for(int y = minY; y <= maxY; y++)
		{			
			rect.y = y * dim.height;
			for(int x = minX; x <= maxX; x++)
			{
				rect.x = x * dim.width;
				gc.g2d.draw(rect);
				gc.g2d.drawString(x * 20 + " " + y * 20,
								  (int)rect.x,(int)rect.y);
			}
		}
	}
	
	protected void updateEntities(Duration delta)
	{
		for(Entity e : entities)
			e.update(delta);
	}
	
	public void paintEntities(GraphicsContext gc)
	{	
		entities.stream()
				.filter(e -> e.contains(GraphicsComponent.class))
				.map(e -> e.get(GraphicsComponent.class))
				.forEach(comp -> comp.paint(gc));
	}
	
	public List<Entity> entitiesVisibleAtLocation(
			Point2D.Double loc)
	{
		List<Entity> visibleEntities =
				new LinkedList<Entity>();
		
		for(Entity entity : entities)
		{
			if(entity.contains(GraphicsComponent.class))
			{
				Rectangle2D.Double graphicBound =
						entity.get(GraphicsComponent.class)
							  .getGraphic()
							  .getBound();
				
				if(graphicBound.contains(loc))
					visibleEntities.add(entity);
			}
		}
		
		return visibleEntities;
	}
	
	public Entity entityAtLoc(Point2D.Double normLoc)
	{		
		List<Entity> entities = entitiesVisibleAtLocation(normLoc);
		
		if(entities.isEmpty())
			return null;
		else 
			return entities.get(0);
	}
	
	
	public List<Graphic> graphicsAtLocation(Point2D.Double loc)
	{
		List<Graphic> visibleGraphics = new ArrayList<Graphic>();
		
		for(Graphic graph : graphics)
		{
			Rectangle2D.Double bound = graph.getBound();
					
			if(bound.contains(loc))
				visibleGraphics.add(graph);
		}
		
		return visibleGraphics;
	}
	
	public List<Entity> entitiesVisibleInsideCamera(Camera camera)
	{
		List<Entity> visibleEntities =
				new LinkedList<Entity>();
				
		for(Entity entity : entities)
		{
			if(entity.contains(GraphicsComponent.class))
			{
				GraphicsComponent comp = entity.get(GraphicsComponent.class);
				
				comp.updateGraphicLocation();
				
				Rectangle2D.Double graphicBound =
						comp.getGraphic()
							.getBound();
				
				if(camera.shows(graphicBound))
					visibleEntities.add(entity);
			}
		}
		
		return visibleEntities;
	}
	
	public List<Entity> entitiesVisibleInsideBound(
			Rectangle2D.Double bound)
	{
		List<Entity> visibleEntities =
				new LinkedList<Entity>();
				
		for(Entity entity : entities)
		{
			if(entity.contains(GraphicsComponent.class))
			{
				Rectangle2D.Double graphicBound =
						entity.get(GraphicsComponent.class)
							  .getGraphic()
							  .getBound();
				
				if(Maths.Maths.overlaps(bound, graphicBound))
					visibleEntities.add(entity);
			}
		}
		
		return visibleEntities;
	}
	
	
	public List<Entity> entitiesWithComponent(
			Class<? extends EntityComponent> c)
	{
		List<Entity> entities = compMap.get(c);
		
		if(entities == null)
			return new LinkedList<Entity>();
		else
			return Collections.unmodifiableList(entities);
	}
	
	public void addGraphic(Graphic graph)
	{
		graphics.add(graph);
	}
	
	public void addEntity(Entity entity)
	{
		if(entity == null)
			throw new NullPointerException();
	
		addQ.add(entity);
		entity.setSceneLoc(this);
	}
	
	public void addEntityNow(Entity entity)
	{
		addEntity(entity);
		entity.setSceneLoc(this);
		clearAddQueue();
	}
	
	private void clearAddQueue()
	{
		for(Entity e : addQ)
		{
			entities.add(e);
			
			for(Class<? extends EntityComponent> c :
				e.getComponentClasses())
			{
				if(compMap.get(c) == null)
					compMap.put(c, new LinkedList<Entity>());
				
				compMap.get(c).add(e);
			}
		}
		
		addQ.clear();
	}
	
	private void clearRemoveQueue()
	{
		for(Entity e : removeQ)
		{
			entities.remove(e);
			
			for(Class<? extends EntityComponent> c :
				e.getComponentClasses())
				compMap.get(c).remove(e);
		}
		
		removeQ.clear();
	}
	
	public void removeEntity(Entity entity)
	{
		if(removeQ.add(entity))
			entity.setSceneLoc(null);
	}
	
	public void removeEntityNow(Entity entity)
	{
		entities.remove(entity);
		
		for(Class<? extends EntityComponent> c :
			entity.getComponentClasses())
			compMap.get(c).remove(entity);
	}
	
	public boolean contains(Entity entity)
	{
		return entities.contains(entity);
	}
	
	public Collection<Entity> getEntities()
	{
		return Collections.unmodifiableCollection(entities);
	}
	
	public List<Entity> getEntities(Class<? extends EntityComponent> c)
	{
		if(compMap.containsKey(GraphicsComponent.class))
			return compMap.get(c);
		else
			return new LinkedList<Entity>();
	}
	
	
	private void addManagers()
	{
		//CollectionUtilities.addAll(managers,
				//new CollisionManager(resources));
				//new EntitySpawner(resources),
				//new EntityDisposer(resources),
				//new BehaviourManager(resources));
	
	}
	
	public void setGame(Game game)
	{
		this.game = game;
	}
	
	public Game getGame() 
	{
		return game;
	}
	
	public void setGridVisible(boolean gridVisible)
	{
		this.gridVisible = gridVisible;
	}
	
	public TileMap getTileMap() {
		return tileMap;
	}
	
	public List<Graphic> getGraphics() {
		return graphics;
	}
	
	public CollisionManager getCollisionManager() {
		return collManager;
	}
	
	public Object clone() {
		return new Scene(this);
	}
}

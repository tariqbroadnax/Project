package Editor.actions;

import java.awt.KeyboardFocusManager;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.FlavorEvent;
import java.awt.datatransfer.FlavorListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JMenuItem;
import javax.swing.JRootPane;
import javax.swing.JToolBar;
import javax.swing.KeyStroke;
import javax.swing.TransferHandler;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.JTextComponent;

import Editor.ActionSupportListener;
import Editor.ActionSupportNotifier;
import Utilities.GUIUtils;

public class Paste extends AbstractAction
	implements PropertyChangeListener,
			   FlavorListener
{
	public static final String PATH = "jlfgr-1.0\\toolbarButtonGraphics\\general\\";

	public static final String smallIconFileName = PATH + "Paste16.gif", largeIconFileName = PATH + "Paste24.gif";

	private Action THPaste, DEKPaste;
	
	private JComponent focusOwner;
	
	private ActionSupportNotifier notifier;
	private JTextComponent textComp;
	
	public Paste()
	{
		super("Paste");
		
		THPaste = TransferHandler.getPasteAction();
		DEKPaste = new DefaultEditorKit.PasteAction();
		
		ImageIcon smallIcon = GUIUtils.ImageIcon(
				smallIconFileName),
				  largeIcon = GUIUtils.ImageIcon(
				largeIconFileName);
		
		putValue(SHORT_DESCRIPTION, "Paste");
		putValue(LONG_DESCRIPTION, "Paste");
		
		putValue(NAME, "Paste");
		putValue(ACTION_COMMAND_KEY, "Paste");
		putValue(MNEMONIC_KEY, KeyEvent.VK_P);
		putValue(DISPLAYED_MNEMONIC_INDEX_KEY,
				KeyEvent.VK_P);
		
		KeyStroke keyStroke = KeyStroke.getKeyStroke(
				"control V");
		putValue(ACCELERATOR_KEY, keyStroke);
		putValue(SMALL_ICON, smallIcon);
		putValue(LARGE_ICON_KEY, smallIcon);
		
		setEnabled(false);
		
		KeyboardFocusManager manager = KeyboardFocusManager.
				getCurrentKeyboardFocusManager();
		
		manager.addPropertyChangeListener(this);
	
		Clipboard clip = Toolkit.getDefaultToolkit()
								.getSystemClipboard();
		
		clip.addFlavorListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) 
	{
		e = new ActionEvent(focusOwner,
				ActionEvent.ACTION_PERFORMED,
				null);
		
		if(notifier != null)
			THPaste.actionPerformed(e);
		else
			DEKPaste.actionPerformed(e);
	}
	
	@Override
	public void propertyChange(PropertyChangeEvent e) 
	{
		Object o = e.getNewValue();
		
		if (o instanceof JComponent)
		{
			focusOwner = (JComponent) o;
			
			if(focusOwner instanceof JMenuItem ||
			   focusOwner instanceof JRootPane ||
			   focusOwner.getParent() instanceof JToolBar)
				return;
			
			checkAndEnabled();
		}	
	}
	
	private void checkAndEnabled()
	{		
		DataFlavor flavors [] = Toolkit.getDefaultToolkit()
								.getSystemClipboard()
								.getAvailableDataFlavors();
		
		TransferHandler handler = focusOwner.getTransferHandler();
		
		boolean enabled = handler.canImport(focusOwner, flavors);

		setEnabled(enabled);
	}
	
	@Override
	public void flavorsChanged(FlavorEvent e) 
	{
		checkAndEnabled();
	}
}

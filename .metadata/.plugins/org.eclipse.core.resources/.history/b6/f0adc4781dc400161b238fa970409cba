package Editor.comp;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.geom.Rectangle2D;

import javax.swing.JComponent;

import Editor.EditorResources;
import Editor.SceneListener;
import EditorGUI.MouseMotionListener;
import Graphic.Camera;
import Tileset.TileMap;

public class TileMapComp extends JComponent
	implements SceneListener, MouseMotionListener
{
	private EditorResources resources;
	private TileMap tm;
	private Camera camera;
	
	private boolean changedMouseCursor;
	
	private int N = 1, S = 2, E = 4, W = 8,
				NW = N|W, NE = N|E, SW = S|W, SE = S|E,
				NO_BOUNDARY = 0;
	
	public TileMapComp(
			EditorResources resources,
			TileMap tm, Camera camera)
	{
		this.resources = resources;
		this.tm = tm;
		this.camera = camera;
		
		updateLocAndSize();
		
		resources.addSceneListener(this);
	}
	
	private void updateLocAndSize()
	{
		Rectangle2D.Double bound = tm.getBound();
		Rectangle scrBound = camera.onScreenBound2(bound);
		
		setBounds(scrBound);
	}
	
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);
	}

	@Override
	public void sceneChanged() 
	{
		updateLocAndSize();
	}
	
	private int boundary(Point p)
	{
		Dimension size = getSize();
		
		int vertBound, horizBound;
		
		if(p.y < 5)
			vertBound = N;
		else if(p.y > size.height - 5)
			vertBound = S;
		else
			vertBound = NO_BOUNDARY;
		
		if(p.x < 5)
			horizBound = W;
		else if(p.x > size.width - 5)
			horizBound = E;
		else
			horizBound = NO_BOUNDARY;
		
		return vertBound | horizBound;
	}
	
	private void changeToSizeCursor(int boundary)
	{
		
	}
	
	@Override
	public void mouseMoved(MouseEvent e)
	{
		Point p = e.getPoint();
		
		int boundary = boundary(p);
		
		if(boundary != NO_BOUNDARY)
			changeToSizeCursor(boundary);
	}
}

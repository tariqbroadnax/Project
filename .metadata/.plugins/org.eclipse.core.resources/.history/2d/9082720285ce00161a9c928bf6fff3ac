package Editor;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.LinkedList;
import java.util.List;

import javax.swing.JPanel;

import Editor.selection.SelectionHandler;
import Editor.tools.Tool;
import EditorGUI.UndoManager;
import Game.Scene;
import Graphic.Camera;
import Graphic.GraphicsContext;
import Maths.Vector2D;

public class SceneEditor extends JPanel
	implements MouseListener, MouseMotionListener,
			   KeyListener, SceneListener,
			   FocusListener, ResourceListener
{
	private EditorResources resources;
	
	private Scene scene;
	
	private Camera camera;
	
	private Tool currTool;
	
	private Point lastp, p;

	public SceneEditor(EditorResources resources, Camera camera)
	{
		this.resources = resources;
		
		scene = resources.scene;
		
		this.camera = camera;
		
		SceneCompMaintainer maintainer = new SceneCompMaintainer(
				resources, camera, this);
		
		
		TMComponent tmComp = new TMComponent(resources, camera, this);
				
		addMouseListener(this);
		addMouseMotionListener(this);
		addKeyListener(this);
		addFocusListener(this);
		
		setLayout(null);
		resources.addSceneListener(this);
		resources.addResourceListener(this);
		setPreferredSize(new Dimension(800, 600));
	
		add(tmComp);
	}
	
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		
		Dimension size = getSize();
		
		camera.setScreenDimension(size);
		
		GraphicsContext gc = new GraphicsContext(
				g.create(), camera, resources.pool);
	
		scene.paint(gc);
		
		if(currTool != null)
			currTool.paint(g);
		
		gc.g2d.dispose();
	}
	
	private void slide()
	{
		Vector2D.Double shift = camera.normalVector(
				lastp.x - p.x, lastp.y - p.y);

		camera.moveFocus(shift);
		resources.notifyOfSceneChange();		
	}
	
	@Override
	public void toolChanged(
			Tool prevTool, Tool newTool)
	{
		removeMouseListener(prevTool);
		removeMouseMotionListener(prevTool);
		
		addMouseListener(newTool);
		addMouseMotionListener(newTool);
	}
	
	protected void addImpl(
			Component comp, Object constraints,
			int index)
	{
		super.addImpl(comp, constraints, index);
		comp.addFocusListener(this);
	}

	@Override
	public void mouseClicked(MouseEvent e) {}

	@Override
	public void mouseEntered(MouseEvent e) 
	{
	
	}

	@Override
	public void mouseExited(MouseEvent e) 
	{		
	}

	@Override
	public void mousePressed(MouseEvent e) 
	{
		requestFocusInWindow();
		p = e.getPoint();

		repaint();
	}

	@Override
	public void mouseReleased(MouseEvent e) 
	{
		
	}

	@Override
	public void mouseDragged(MouseEvent e) 
	{
		lastp = p;
		p = e.getPoint();
		
		//if(currSTH == null)
		//	slide();
		
		repaint();
	}

	@Override
	public void mouseMoved(MouseEvent e) 
	{
		if(currSTH == null)
			return;
		
		p = e.getPoint();
		repaint();
	}

	@Override
	public void keyPressed(KeyEvent e) 
	{
		int kc = e.getKeyCode();
		
		switch(kc)
		{
			case KeyEvent.VK_UP:
				camera.moveFocus(0, -5);
				break;
			case KeyEvent.VK_DOWN:
				camera.moveFocus(0, 5);
				break;
			case KeyEvent.VK_LEFT:
				camera.moveFocus(-5, 0);
				break;
			case KeyEvent.VK_RIGHT:
				camera.moveFocus(5, 0);
				break;
		}
		
		resources.notifyOfSceneChange();
	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void sceneChanged() {
		repaint();
	}

	@Override
	public void focusGained(FocusEvent e) 
	{
		UndoManager undoManager = resources.getUndoManager();
		
		resources.getUndoAction()
				 .setUndoManager(undoManager);
		
		resources.getRedoAction()
				 .setUndoManager(undoManager);		
	}

	@Override
	public void focusLost(FocusEvent e) {}
}
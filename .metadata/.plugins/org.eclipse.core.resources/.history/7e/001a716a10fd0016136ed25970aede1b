package Game;

import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.time.Duration;

import Ability.TeleportAbility;
import Actions.ActionComponent;
import CollisionResponses.ChangeScene;
import Entity.Entity;
import EntityComponent.AbilityComponent;
import EntityComponent.BehaviourComponent;
import EntityComponent.GraphicsComponent;
import EntityComponent.Limb;
import EntityComponent.RigidBodyComponent;
import EntityComponent.StatsComponent;
import GUI.UI;
import Inventory.InventoryComponent;
import Movement.MovementComponent;
import Quest.QuestComponent;
import Utilities.Scheduler;

public class Game
{	
	private Scene scene;

	private Entity player;
	
	private UI ui;
	
	private Updater updater;
	private Scheduler scheduler;
	private AudioPlayer audioPlayer;
		
	public Game()
	{	
		scene = new Scene();
		
		updater = new Updater(60);

		scheduler = new Scheduler();
		
		updater.addUpdatable(
				delta -> update(delta));
		
		player = new Entity();
		
		player.add(new GraphicsComponent(),
				   new MovementComponent(),
				   new AbilityComponent(),
				   new ActionComponent(),
				   new InventoryComponent(),
				   new QuestComponent(),
				   new StatsComponent(),
				   new RigidBodyComponent());
		
		ui = new UI(scene, updater, player,
					UI.FRAME_MODE);
		
		audioPlayer = new AudioPlayer();
		// TESTING
		
		scene.setGame(this);
		
		TeleportAbility ability = new TeleportAbility();
	
		player.get(AbilityComponent.class)
			  .addPointAbility(ability);
		
		player.get(RigidBodyComponent.class)
			  .getRigidBody()
			  .addLimb(new Limb(new Rectangle2D.Double(0,0,10,10)));
		
		scene.addEntityNow(player);
	
		Entity npc = new Entity();
		
		npc.add(new GraphicsComponent(),
				new MovementComponent(),
				new BehaviourComponent(),
				new RigidBodyComponent());
		
		npc.get(RigidBodyComponent.class)
		   .getRigidBody()
		   .addLimb(new Limb(new Rectangle2D.Double(0,0,10,10)));
	
		npc.setLoc(0, -50);
//		npc.get(BehaviourComponent.class)
//		   .addBehaviour(new TestBehaviour());
//		
		npc.get(RigidBodyComponent.class)
		   .add(new ChangeScene());
		
		scene.addEntity(npc);
		
//		try {
//			File file = new File("C:\\Users\\Tariq Broadnax\\Downloads\\Deep.wav");
//			System.out.println(file.exists());
//			Clip clip = AudioSystem.getClip();
//			
//			for(javax.sound.sampled.AudioFileFormat.Type type : AudioSystem.getAudioFileTypes())	
//				System.out.println(type.getExtension());
//			
//			clip.open(AudioSystem.getAudioInputStream(file));
//			
//			audioPlayer.start(clip);
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
		
		CheatCode code = new CheatCode();
		
		ui.getFrame()
		  .addKeyListener(code);
	}
	
	public void setPlayer(Entity player)
	{
		this.player = player;
		
		ui.setPlayer(player);		
	}
	
	private void update(Duration delta)
	{		
		scene.update(delta);
		scheduler.update(delta);
	}
	
	public void setScene(Scene scene)
	{
		this.scene = scene;
		
		ui.setScene(scene);
		
		scene.setGame(this);
	}
	
	public void changeScene(
			String fileName, Point2D.Double playerLoc)
	{
		updater.stop();
			
		new Thread(()->_changeScene(fileName, playerLoc)).start();
	}
	
	private void _changeScene(
			String fileName, Point2D.Double playerLoc)
	{
		while(updater.isUpdating()){}
		
		try (ObjectInputStream in = 
				new ObjectInputStream(
				new FileInputStream(fileName)))
		{	
			ui.showLoadScreen();
			
			scene.removeEntity(player);
			
			Scene scene = (Scene) in.readObject();
		
			setScene(scene);
			
			scene.addEntity(player);
			
			player.setLoc(playerLoc);
			
			if(player.contains(MovementComponent.class))
				player.get(ActionComponent.class)
					  .stopAll();
			
			ui.showScene();
			
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
		}
		
		updater.start();
	}
	
	public void start()
	{
		ui.setGUIVisible(true);
		updater.start();
	}
	
	public void stop()
	{
		ui.setGUIVisible(false);
		updater.stop();
	}
	
	public Scene getScene() {
		return scene;
	}
	
	public Entity getPlayer() {
		return player;
	}
	
	public UI getUI() {
		return ui;
	}
	
	public Scheduler getScheduler() {
		return scheduler;
	}
}

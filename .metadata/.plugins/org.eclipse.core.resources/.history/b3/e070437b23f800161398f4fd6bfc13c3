package EntityComponent;

import static Utilities.ShapeUtilities.collides;

import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RectangularShape;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import Graphic.Vector2D;
import Maths.Circle2D;
import Utilities.Pack;

public class RigidBody implements Cloneable, Serializable
{	
	private List<Limb> limbs;
	
	public RigidBody()
	{
		limbs = new ArrayList<Limb>();
	}
	
	public RigidBody(RigidBody body)
	{
		limbs = new ArrayList<Limb>();
		
		for(Limb limb : body.limbs)
		{
			limb = (Limb) limb.clone();
			 
			limbs.add(limb);
		}
	}
	
	public void updateLimbs(Point2D.Double pt)
	{
		for(Limb limb : limbs)
		{
			Vector2D.Double offset = limb.getOffset();
			
			RectangularShape shape = limb.getShape();
			
			double width = shape.getWidth(),
				   height = shape.getHeight();
			
			shape.setFrame(pt.x - width/2 + offset.x,
						   pt.y - height/2 + offset.y,
						   width, height);
		}
	}
	
	public void addLimb(Limb limb) {
		limbs.add(limb);
	}
	
	public void removeLimb(Limb limb) {
		limbs.remove(limb);
	}

	public Point2D.Double center()
	{
		double xs = 0, ys = 0;
		
		int size = 0;
		
		for(Limb limb : limbs)
		{
			RectangularShape shape = limb.getShape();
			
			xs += shape.getCenterX();
			ys += shape.getCenterY();
			size++;
		}
		
		return new Point2D.Double(xs / size, ys / size);
	}
	
	// returns first collision found 
	public Pack<RectangularShape, RectangularShape> collidesWith(RigidBody rigidBody)
	{
		for(Limb limb1 : limbs)
		{
			RectangularShape shape1 = limb1.getShape();
			
			for(Limb limb2 : rigidBody.limbs)
			{
				RectangularShape shape2 = limb2.getShape();
				
				if(collides(shape1, shape2))
					return new Pack<RectangularShape, RectangularShape>(
									myComp, otherComp);
			}
		}
		
		return null;
	}
	
	
	public Rectangle2D.Double union()
	{
		if(limbs.size() == 0)
			return null;
		
		double minX = Double.POSITIVE_INFINITY,
			   minY = minX,
			   maxX = Double.NEGATIVE_INFINITY,
			   maxY = maxX;
		
		for(Limb limb : limbs)
		{
			RectangularShape shape = limb.getShape();
			
			double minX2 = shape.getMinX(),
				   minY2 = shape.getMinY(),
				   maxX2 = shape.getMaxX(),
				   maxY2 = shape.getMaxY();
			
			minX = minX < minX2 ? minX : minX2;
			minY = minY < minY2 ? minY : minY2;
			maxX = maxX > maxX2 ? maxX : maxX2;
			maxY = maxY > maxY2 ? maxY : maxY2;
		}
		
		return new Rectangle2D.Double(minX, minY, maxX - minX, maxY - minY);
	}
	
	public List<Limb> getLimbs() {
		return limbs;
	}
	
	public Object clone() {
		return new RigidBody(this);
	}
}

package GUI;

import java.util.concurrent.TimeUnit;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import Actions.ActionBuffer;
import Entity.Entity;
import Game.Scene;
import Game.Updater;
import Graphic.Camera;
import Graphic.Painter;

public class UI
{
	public final static int CANVAS_MODE = 0, FRAME_MODE = -1;
		
	private GFrame frame;
	private GPanel panel;
	
	private Painter painter;
	
	private Camera camera;
	
	private ActionBuffer buffer;
	
	private HUD hud;
	
	private int viewMode;
	
	private Scene scene;
	
	private GLayeredPane layers;
	
	private MouseController mouseControl;
	
	private LoadScreen loadScreen;
	
	public UI(Scene scene, Updater updater, Entity player,
			  int viewMode)
	{			
		this.scene = scene;
		
		layers = new GLayeredPane();
		
		hud = new HUD();
		
		camera = new Camera();
		
		frame = new GFrame(updater);

		panel = new GPanel();

		loadScreen = new LoadScreen();
		
		if(viewMode == FRAME_MODE)
			painter = new Painter(frame, camera);
		else
			painter = new Painter(panel, camera);
		
		buffer = new ActionBuffer();
		
		painter.addPaintable(scene);
		
		updater.addUpdatable(d -> painter.paint(),
							 d -> buffer.invokeAll());
		
		camera.setFocus(player.getLoc());
		
		mouseControl = new MouseController(player, camera, buffer);
		
		panel.addMouseListener(mouseControl);
		frame.addMouseListener(mouseControl);
	
		frame.setContentPane(layers);
		frame.getRootPane()
			 .setOpaque(false);
	
		setViewMode(viewMode);
		
		layers.addAndSetLayer(hud, 1);
		layers.addAndSetLayer(loadScreen, 2);
		
		loadScreen.setVisible(false);
		
	  try {
          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
      } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
          ex.printStackTrace();
      }
	 
	}
	
	public void showLoadScreen()
	{
		loadScreen.setVisible(true);
		loadScreen.fadeIn();
		
		try {
			TimeUnit.MILLISECONDS.wait(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		hud.setVisible(false);
	}
	
	public void showScene()
	{
		
	}
	
	public void setPlayer(Entity player)
	{
		if(player != null)
		{
			camera.setFocus(player.getLoc());
			mouseControl.setPlayer(player);
		}
	}
	
	public void setScene(Scene scene)
	{
		painter.swapPaintable(this.scene, scene);
	
		this.scene = scene;
	}
	
	public void setViewMode(int viewMode)
	{
		this.viewMode = viewMode;
		
		if(viewMode == FRAME_MODE)
		{
			painter.setToWindow(frame);
			frame.setContentPane(layers);
		}
		else
		{
			painter.setToPanel(panel);
			panel.add(layers);
		}
	}
	
	public void setGUIVisible(boolean visible) 
	{
		if(viewMode == FRAME_MODE)
			frame.setVisible(visible);
		
//		hud.getDialogueArea()
//			 .setDialogue(new Dialogue());
	}
	
	public HUD getHUD() {
		return hud;
	}
	
	public JFrame getFrame() {
		return frame;
	}
	
	public JPanel getPanel() {
		return panel;
	}
}

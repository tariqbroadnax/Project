import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.swing.JComponent;

import Editor.SceneEditor;
import Editor.SceneListener;
import Entity.Entity;
import EntityComponent.GraphicsComponent;
import Game.Scene;
import Graphic.Camera;
import Graphic.Graphic;

public class SceneCompMaintainer implements SceneListener
{
	private Scene scene;
	private Camera camera;
	private SceneEditor editor;

	private Map<Graphic, JComponent> graphMap;
	private Map<Entity, JComponent> entMap;
	
	public SceneCompMaintainer()
	{
		
	}

	@Override
	public void sceneChanged() 
	{
		checkAndMaintainGraphComps();
	}
	
	private void findVisGraphs(
			List<Graphic> sceneGraphs,
			List<Graphic> visGraphs, List<Graphic> nonvisGraphs)
	{
		for(Graphic graph : sceneGraphs)
		{
			Rectangle2D.Double bound = graph.getBound();
			
			if(camera.shows(bound))
				visGraphs.add(graph);
			else
				nonvisGraphs.add(graph);
		}
	}
	
	private void createVisGraphComps(List<Graphic> visGraphs)
	{
		for(Graphic graph : visGraphs)
		{
			if(!graphMap.containsKey(graph))
			{
				JComponent comp = graphComp(graph);
				
				editor.add(comp);
				graphMap.put(graph, comp);
			}
		}
	}
	
	private void removeRemovedAndNonvisGraphComps(
			List<Graphic> sceneGraphs,
			List<Graphic> nonvisGraphs)
	{
		List<Graphic> graphsToRemove = new ArrayList<Graphic>();
		
		for(Graphic graph : graphMap.keySet())
		{
			if(!sceneGraphs.contains(graph) ||
				nonvisGraphs.contains(graph))
			{
				graphsToRemove.add(graph);
				editor.remove(graphMap.get(graph));
			}
		}
		
		
		
		graphMap.keySet()
				.removeIf(g -> !sceneGraphs.contains(g) ||
								nonvisGraphs.contains(g));
	}
	
	private void checkAndMaintainGraphComps()
	{
		List<Graphic> sceneGraphs = scene.getGraphics(),
					  visGraphs = new ArrayList<Graphic>(),
					  nonvisGraphs = new ArrayList<Graphic>();	
		
		findVisGraphs(sceneGraphs, visGraphs, nonvisGraphs);
		createVisGraphComps(visGraphs);
		removeRemovedAndNonvisGraphComps(sceneGraphs, nonvisGraphs);
	}
	
	private void removeRemovedAndNonvisEntComps(
			List<Entity> ents, List<Entity> nonvisEnts)
	{
		
	}
	
	private void createVisEntComps(List<Entity> visEnts)
	{
		for(Entity ent : visEnts)
		{
			if(!entMap.containsKey(ent))
			{
				JComponent comp = entComp(ent);
			
				editor.add(comp);
				entMap.put(ent, comp);
			}
		}
	}
	
	private void findVisEnts(
			List<Entity> ents, 
			List<Entity> visEnts, List<Entity> nonvisEnts)
	{
		for(Entity ent : ents)
		{
			Rectangle2D.Double bound = ent.get(GraphicsComponent.class)
										  .getGraphic()
										  .getBound();
			
			if(camera.shows(bound))
				visEnts.add(ent);
			else
				nonvisEnts.add(ent);
		}
	}
	
	private void checkAndMaintainEntComps()
	{
		List<Entity> visEnts = new ArrayList<Entity>(),
				  nonvisEnts = new ArrayList<Entity>(),
				  ents = scene.getEntities(GraphicsComponent.class);		
		
		if(ents == null)
		for(Entity ent : scene.getEntities(GraphicsComponent.class) )
		{
			Rectangle2D.Double bound = graph.getBound();
			
			if(camera.shows(bound))
				visGraphs.add(graph);
			else
				nonvisGraphs.add(graph);
		}
		
		for(Graphic graph : visGraphs)
		{
			if(!map.containsKey(graph))
			{
				JComponent comp = graphComp(graph);
				
				editor.add(comp);
				map.put(graph, comp);
			}
		}
	}
	
	private JComponent graphComp(Graphic graph)
	{
		return null;
	}
	
	private JComponent entComp(Entity ent)
	{
		return null;
	}
}

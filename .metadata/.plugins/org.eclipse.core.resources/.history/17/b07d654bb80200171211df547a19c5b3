package EntityComponent;

import java.time.Duration;
import java.util.ArrayList;
import java.util.List;

import Entity.CombatText;
import Entity.Entity;
import Modifiers.Damage;
import Modifiers.DamageModifier;
import Modifiers.Heal;
import Stat.Stats;

public class CombatComponent extends EntityComponent
{
	public final long OUT_OF_COMBAT_DUR = 5000;
	
	private List<CombatListener> lists;
	
	private List<DamageModifier> dmgMods;
	
	private long durSinceLastAttack;
	
	private boolean blockEnabled, dodgeEnabled;
	
	public CombatComponent()
	{
		lists = new ArrayList<CombatListener>();
		
		dmgMods = new ArrayList<DamageModifier>();
		
		blockEnabled = dodgeEnabled = true;
	}
	
	@Override
	public void update(Duration delta) 
	{
		durSinceLastAttack += delta.toMillis();
	}
	
	public void applyHeal(Heal heal)
	{
		Entity target = heal.getTarget();
	
		Stats srcStats = parent.get(StatsComponent.class)
							   .getStats(),
			  targetStats = parent.get(StatsComponent.class)
			  					  .getStats();
		
		double flat = heal.getFlatAmount(),
			   scale = heal.getScaledAmount(),
			   perc = heal.getPercentAmount();
			   
	
			   
	
	}
	
	public void applyDamage(Damage damage)
	{
		Entity target = damage.getTarget();

		Stats targetStats = target.get(StatsComponent.class)
								  .getStats();
		
		double dodgeRate = targetStats.getDodgeRate(),
			   blockRate = targetStats.getBlockRate();
		
		if(Math.random() < dodgeRate)
		{
			showCombatText("MISS", target);
			return;
		}
		else if(Math.random() < blockRate)
		{
			showCombatText("DODGE", target);
			return;
		}
		
		Stats srcStats = parent.get(StatsComponent.class)
							   .getStats();
		
		double attack = srcStats.getAttack(),
			   value = damage.getFlatAmount() +
			   		   damage.getScaleAmount() * attack;
		
		double critRate = srcStats.getCritRate();
		
		if(Math.random() < critRate)
		{
			value *= 2;
		}
		
		targetStats.damage(value);
		showCombatText("" + (int)value, target);
		
		for(CombatListener list : lists)
			list.entityAttacked(target, value);
		
		durSinceLastAttack = 0;
	}
	
	private void showCombatText(String message, Entity target)
	{
		CombatText text = new CombatText(message);
		
		text.setLoc(target.getLoc());
		
		parent.getSceneLoc()
			  .addEntity(text);
	}
	
	public void notifyOfBeingAttacked(Entity ent)
	{
		for(CombatListener list : lists)
			list.entityAttacks(ent);
		
		durSinceLastAttack = 0;
	}
	
	public void notifyOfKill(Entity ent)
	{
		for(CombatListener list : lists)
			list.entityKilled(ent);
	}
	
	public void setBlockEnabled(boolean blockEnabled) {
		this.blockEnabled = blockEnabled;
	}
	
	public void setDodgeEnabled(boolean dodgeEnabled) {
		this.dodgeEnabled = dodgeEnabled;
	}
	
	public boolean isBlockEnabled() {
		return blockEnabled;
	}
	
	public boolean isDodgeEnabled() {
		return dodgeEnabled;
	}
	
	public long getDurationSinceLastAttack() {
		return durSinceLastAttack;
	}
	
	public boolean isOutOfCombat() {
		return durSinceLastAttack > OUT_OF_COMBAT_DUR;
	}
	
	public void addDamageModifier(DamageModifier mod) {
		dmgMods.add(mod);
	}
	
	public void removeDamageModifier(DamageModifier mod) {
		dmgMods.remove(mod);
	}
	
	public void addCombatListener(CombatListener list) {
		lists.add(list);
	}
	
	public void removeCombatListener(CombatListener list) {
		lists.remove(list);
	}
	
	@Override
	protected EntityComponent _clone() {
		return new CombatComponent();
	}
}

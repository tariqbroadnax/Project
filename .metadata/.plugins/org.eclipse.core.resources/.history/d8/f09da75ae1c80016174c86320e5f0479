package Editor;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Point2D;
import java.util.LinkedList;
import java.util.List;

import javax.swing.JPanel;

import EditorGUI.UndoManager;
import Game.Scene;
import Graphic.Camera;
import Graphic.GraphicsContext;
import Maths.Vector2D;

public class SceneEditor extends JPanel
	implements MouseListener, MouseMotionListener,
			   KeyListener, SceneListener,
			   FocusListener
{
	private EditorResources resources;
	
	private Scene scene;
	
	private Camera camera;
	
	private List<SelectionTransferHandler> STHs;

	private SelectionTransferHandler currSTH;
	
	private Point lastp, p;
	
	private UndoManager undoManager;
	
	public SceneEditor(EditorResources resources)
	{
		this.resources = resources;
		
		scene = resources.scene;
		
		camera = new Camera();
		
		STHs = new LinkedList<SelectionTransferHandler>();
	
		undoManager = new UndoManager();
		
		SceneCompMaintainer maintainer = new SceneCompMaintainer(
				resources, camera, this);
		
		STHs.add(new TileTransferHandler(resources, camera, undoManager));
		STHs.add(new EntityTransferHandler(resources, undoManager));
		
		addMouseListener(this);
		addMouseMotionListener(this);
		addKeyListener(this);
		addFocusListener(this);
		
		setLayout(null);
		resources.addSceneListener(this);
	}
	
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		
		Dimension size = getSize();
		
		camera.setScreenDimension(size);
		
		GraphicsContext gc = new GraphicsContext(
				g, camera, resources.pool);
	
		scene.paint(gc);
		
		if(currSTH != null)
			currSTH.paintSelection(gc);
	}
	
	private void slide()
	{
		Vector2D.Double shift = camera.normalVector(
				lastp.x - p.x, lastp.y - p.y);

		camera.moveFocus(shift);
		resources.notifyOfSceneChange();
	}
	
	protected void addImpl(
			Component comp, Object constraints,
			int index)
	{
		super.addImpl(comp, constraints, index);
		comp.addFocusListener(this);
	}

	@Override
	public void mouseClicked(MouseEvent e) {}

	@Override
	public void mouseEntered(MouseEvent e) 
	{
		if(resources.selection == null)
			return;
		
		for(SelectionTransferHandler sth : STHs)
			if(sth.setSelection(resources.selection))
			{	
				currSTH = sth;
				addMouseListener(currSTH);
				addMouseMotionListener(currSTH);
				break;
			}
	}

	@Override
	public void mouseExited(MouseEvent e) 
	{
		if(currSTH != null)
		{
			removeMouseListener(currSTH);
			removeMouseMotionListener(currSTH);
			currSTH = null;
		}
		
		repaint();
	}

	@Override
	public void mousePressed(MouseEvent e) 
	{
		requestFocusInWindow();
		p = e.getPoint();

		if(resources.selection != null &&
		   resources.sceneSelection)
		{
			resources.selection = null;
			repaint();
		}

		repaint();
	}

	@Override
	public void mouseReleased(MouseEvent e) 
	{
		
	}

	@Override
	public void mouseDragged(MouseEvent e) 
	{
		lastp = p;
		p = e.getPoint();
		
		if(currSTH == null)
			slide();
		else
			importSelection();
		
		repaint();
	}

	@Override
	public void mouseMoved(MouseEvent e) 
	{
		if(currSTH == null)
			return;
		
		p = e.getPoint();
		repaint();
	}

	@Override
	public void keyPressed(KeyEvent e) 
	{
		int kc = e.getKeyCode();
		
		switch(kc)
		{
			case KeyEvent.VK_UP:
				camera.moveFocus(0, -5);
				break;
			case KeyEvent.VK_DOWN:
				camera.moveFocus(0, 5);
				break;
			case KeyEvent.VK_LEFT:
				camera.moveFocus(-5, 0);
				break;
			case KeyEvent.VK_RIGHT:
				camera.moveFocus(5, 0);
				break;
		}
		
		repaint();
	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void sceneChanged() {
		repaint();
	}

	@Override
	public void focusGained(FocusEvent e) 
	{
		resources.getUndoAction()
				 .setUndoManager(undoManager);
		
		resources.getRedoAction()
				 .setUndoManager(undoManager);		
	}

	@Override
	public void focusLost(FocusEvent e) {}
}